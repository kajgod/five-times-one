{
   "title": "5times1",
   "description": "",
   "link": "https://5times1.blogspot.com/",
   "image": "",
   "category": [
      "RxJS",
      "Firebase",
      "ReactNative",
      "NewHardParts"
   ],
   "items": [
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p style=&quot;text-align: left;&quot;>Observable vs. Promise</p><p style=&quot;text-align: left;&quot;></p><ul style=&quot;text-align: left;&quot;><li>observable is lazy: just an object with forEach method; promise is eager.</li><li>promise does something right away, observable does nothing until forEach is called</li><li>you can&#39;t retry the promise</li><li>an observable can be converted to promise; the other way around can&#39;t be done because promise starts work on initialization&nbsp; <br /></li></ul>Observable vs. Node stream<p></p><p style=&quot;text-align: left;&quot;></p><ul style=&quot;text-align: left;&quot;><li>in observable we have producers who push data, and forEach that consumes it; streams are both</li><li>observable can stop (dispose) listening, but it doesn&#39;t have an option to pause. it&#39;s either on, or it isn&#39;t going to get the data</li><li>Node stream can push and pull data, but consumer has the option to pause, and then resume where it paused</li><li>there are no streams on frontend (no such APIs)</li></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_22.html",
         "published": 1632287400000,
         "created": 1632287400000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p>&nbsp; exercises</p><p></p><ul style=&quot;text-align: left;&quot;><li>clicks.throttleTime(1000). concatMap( - is a simple throttle method</li><li>debounceTime is similar to throttleTime except it keeps track of the most recent value from the Observable, and emits that only when the defined duration has passed without any other value appearing on the source Observable</li><li>distinctUntilChanged() only emits when current value differs from the last</li><li>scan() - sort of similar to reduce, but reduce shows only the final value, while scan shows EVERY value emitted on source observable</li></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_16.html",
         "published": 1631769960000,
         "created": 1631769960000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li>HTTP requests are usually exposed via callback APIs (actually, mostly promise-based now :-))</li><li>it gets more complicated when there&#39;s need for orchestrating HTTP reqs</li><li>async error handling also hard</li><li>if req/resp can be a sequence (to convert to Observable), it would have one item, and then completed</li><li>keeping it as a sequence (pseudoarray) instead of scalar helps maintain same functions we used on sequences</li><li><b>Observable.create()</b> can&nbsp; convert any asynchronous API into an Observable, as long as they can:</li><ul><li>receive data</li><li>receive error information</li><li>notify when operation completed</li><li>notify when to unsubscribe</li></ul></ul><p></p><blockquote><div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>Observable.create(function(observer) {</div><div><div><span style=&quot;white-space: pre;&quot;>\t\t\t</span>var subscribed = true;</div><div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp;  &nbsp;  var data, error // this will hook to some API</span><br /></div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>// If client is still interested in the results, send them.</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>if (subscribed) {</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>// Send data to the client</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>observer.next(data);</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>// Immediately complete the sequence</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>observer.complete();</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>}</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>// If client is still interested in the results, send them.</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>if (subscribed) {</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>// Inform the client that an error occurred.</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t\t</span>observer.error(error);</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>}</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t</span>// Definition of the Subscription objects unsubscribe method.</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t</span>return function() {</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t\t</span>subscribed = false;</div><div><span style=&quot;white-space: pre;&quot;>\t\t\t</span>}</div><div><span style=&quot;white-space: pre;&quot;>\t\t</span>});</div></div></blockquote><div><div></div></div>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_15.html",
         "published": 1631682180000,
         "created": 1631682180000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li>event = array except event is async &amp;amp; never completes</li><li>if we convert Events to Observable Objects, we can use array-like functions to transform them</li><li>fromEvent() converts an event to Observable</li><li>someObservable.do() can traverse an event &quot;array&quot;, but needs unsubscribe()&nbsp; </li><li>take() removes the need to unsubscribe:</li></ul><p></p><blockquote>buttonClicks.take(1).forEach(function() {<br /> <span>&nbsp; &nbsp;  &nbsp; </span>alert(&quot;Button was clicked once. Stopping Traversal.&quot;);<br /> });</blockquote><p></p><ul style=&quot;text-align: left;&quot;><li>&nbsp; .takeUntil(stopEventObs) takes an observable as an argument, and unsubscribes when it gets any response from it</li><li>when using methods on Observables, unlike arrays, you cannot use indexes like arr[2]</li><li>most important methods on an Observable:</li><ul><li>map()</li><li>filter()</li><li>concatAll()</li><li>concatMap()</li><li>reduce()</li><li>zip()</li><li>take()</li><li>takeUntil()</li></ul></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_10.html",
         "published": 1631249520000,
         "created": 1631249520000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Firebase with React, v2 (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li><b>security rules</b> can be added to each collection or document</li></ul><blockquote> service &amp;lt;&amp;lt;name&amp;gt;&amp;gt; {<br />  <span>&nbsp; &nbsp;  &nbsp; </span>match &amp;lt;&amp;lt;path&amp;gt;&amp;gt; {<br />    <span>&nbsp; &nbsp;  <span>&nbsp; &nbsp;  &nbsp; </span>&nbsp; </span>allow &amp;lt;&amp;lt;methods&amp;gt;&amp;gt; : if &amp;lt;&amp;lt;condition&amp;gt;&amp;gt;<br />  <span>&nbsp; &nbsp;  &nbsp; </span>}<br />}</blockquote><p></p><ul style=&quot;text-align: left;&quot;><li>only positive rules are applied. if any rule allows for something, other rules cannot petition it</li><li>by default everything is allowed, as soon as there is a rule: nothing is</li><li>example of a sane rule (using auth.uid &amp;amp; roles in documents related to the said user):</li></ul><p></p><blockquote>service cloud.firestore {<br />  <span>&nbsp; &nbsp;  &nbsp; </span>match /databases/{database}/documents {<br />    <span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>match /some_collection/{document} {<br />     <span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == &quot;Reader&quot;<br />     <span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == &quot;Writer&quot;<br />    <span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>}<br />  <span>&nbsp; &nbsp;  &nbsp; </span>}<br />}</blockquote><p></p><div><ul style=&quot;text-align: left;&quot;><li>checking for roles using `get` (as in the example) or `exists` carry charges for read operations!</li></ul></div>",
         "link": "https://5times1.blogspot.com/2021/09/firebase-with-react-v2-frontendmasters_9.html",
         "published": 1631163540000,
         "created": 1631163540000,
         "category": {
            "$text": "Firebase",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p></p><div>exercises</div><ul style=&quot;text-align: left;&quot;><li>in relational data structure (like SQL) a child holds references to parents (campaignId), while hierarchical structure (like JSON, MongoDB or Firestore) holds reference to children inside a parent</li><li>using functions we learned, we can traverse (query) both ways - even from child to parent</li><li>OBSERVABLE</li><ul><li>similar to event:&nbsp; a sequence of values that a data producer pushes to the consumer</li><li>unlike event:&nbsp; Observable can signal to a listener that it has completed</li><li>querying Observables allows us to create data sets that react and update as the system changes over time = reactive programming</li></ul></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_8.html",
         "published": 1631078220000,
         "created": 1631078220000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "exercises with made-up functions:<div><ul style=&quot;text-align: left;&quot;><li>concatMap - maps through array, and then concatAll</li><ul><li>tip: usually there are n-1 concatAlls if there are n maps. therefore - with concatMap = 1 map, other concatMaps</li></ul><li>reduce - like reduce, but returns an array with single value instead of single value</li><li>zip - merges elements of two arrays one by one (like zipper on trousers)</li></ul></div>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript_7.html",
         "published": 1630990140000,
         "created": 1630990140000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Firebase with React, v2 (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li>a document database requires more defensive programming because there&#39;s no schema to fall back to: any future changes can be missing in former documents</li><li>authorization: enable on firebase console</li><li>simple implementation on fronten</li><li>lacking security without functions/regular backend&nbsp; </li></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/firebase-with-react-v2-frontendmasters_6.html",
         "published": 1630939020000,
         "created": 1630939020000,
         "category": {
            "$text": "Firebase",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Firebase with React, v2 (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li>firestore.collection(&#39;col&#39;).where(&#39;foo&#39;, &#39;==&#39;, &#39;bar&#39;).get().then(<b>querySnapshot</b> =&amp;gt; {&nbsp; </li><ul><li>querySnapshot contains one or more <b>documentSnapshots</b> and some props &amp;amp; methods:</li><ul><li>docs: Array&amp;lt;QueryDocumentSnapshot&amp;lt;T&amp;gt;&amp;gt;</li><li>empty: boolean</li><li>forEach: does what it sounds like</li><li>isEqual (other :&nbsp;  QuerySnapshot &amp;lt; T &amp;gt; ): boolean</li><li>...</li></ul><li>documentSnapshot</li><ul><li>exists: boolean</li><li>id: string</li><li>data()</li><li>get(fieldPath:&nbsp;  string | FieldPath): any</li><li>...</li></ul><li>collection.<b>add</b>(data :&nbsp;  T): Promise&amp;lt;DocumentReference&amp;lt;T&amp;gt;&amp;gt;:</li></ul></ul><blockquote>let collectionRef = firestore.collection(&#39;col&#39;); <br />collectionRef.add({foo: &#39;bar&#39;}).then(documentReference =&amp;gt; {.&nbsp; <br />&nbsp;  &nbsp;  console.log(`Added document with name: ${documentReference.id}`); <br />});</blockquote><p></p><ul style=&quot;text-align: left;&quot;><ul><li>firestore.collection(&#39;col&#39;).doc(&#39;doc&#39;).<b>delete</b>()&nbsp; </li><ul><li>returns promise with delete time</li></ul><li><b>onSnapshot</b>: real-time listening to shapshots&nbsp; </li><ul><li>accepts EITHER a single observer with next and error callbacks (onCompletion will never fire because stream never ends)</li><li>...or two callbacks:</li></ul></ul></ul><blockquote>const unsubscribe&nbsp; = firestore.doc(&#39;col/doc&#39;).onSnapshot(documentSnapshot =&amp;gt; {&nbsp; <div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>if (documentSnapshot.exists) {&nbsp; </div><div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>console.log(documentSnapshot.data());&nbsp; </div><div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>}&nbsp; </div><div><span>&nbsp; &nbsp;  &nbsp; </span>}, err =&amp;gt; {&nbsp; </div><div><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>console.log(`Encountered error: ${err}`);&nbsp; </div><div><span>&nbsp; &nbsp;  &nbsp; </span>}</div><div>);</div><div>unsubscribe();</div></blockquote><div><p></p><p></p></div>",
         "link": "https://5times1.blogspot.com/2021/09/firebase-with-react-v2-frontendmasters_3.html",
         "published": 1630645920000,
         "created": 1630645920000,
         "category": {
            "$text": "Firebase",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Firebase with React, v2 (frontendmasters)",
         "description": "<p></p><ul style=&quot;text-align: left;&quot;><li>Firebase used to have only Realtime Database, but is now pushing Firestore, also realtime db</li><li>IT&#39;S THE SAME database, and the same queries I already used on Google Cloud!</li><li>Firestore reasonably cheap; can billing alerts etc.</li><li>Firestore: collection &amp;gt; documents &amp;gt; other collections &amp;gt; other documents etc.&nbsp; </li><li>query only gets the level required, if data down the tree needed - needs to be specified</li><ul><li>firestore.collection(&quot;posts&quot;).doc(&quot;dfklsa34sjd&quot;).collection(&quot;comments&quot;)</li><li>...is the same as: firestore.collection(&quot;posts/dfklsa34sjd/comments&quot;)</li><li>if document-level needs to get accessed:<br />firestore.doc(&quot;post/dfklsa34sjd&quot;)</li></ul><li>less database normalization (process of structuring a database,&nbsp;  in accordance with normal forms)</li><li>has SQL-like queries:</li><ul><li>firestore.collection(&quot;posts&quot;).orderBy(&quot;createdAt&quot;, &quot;desc&quot;)</li><li>firestore.collection(&quot;posts&quot;).where(&quot;stars&quot;, &quot;&amp;gt;=&quot;, 5)</li></ul></ul><p></p>",
         "link": "https://5times1.blogspot.com/2021/09/firebase-with-react-v2-frontendmasters.html",
         "published": 1630558920000,
         "created": 1630558920000,
         "category": {
            "$text": "Firebase",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p>&nbsp; exercises</p>",
         "link": "https://5times1.blogspot.com/2021/09/asynchronous-programming-in-javascript.html",
         "published": 1630507740000,
         "created": 1630507740000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<p></p><div><br /></div><ul style=&quot;text-align: left;&quot;><li><b>takeUntil </b><br />{…1…2…………3}.takeUntil({……………4}).&nbsp;  &nbsp; ==&amp;gt;&nbsp; {…1…2…}<br />first is source collection, second is stop (the second stops listening to source)<br />if the source collection calls for onComplete, this method calls dispose on stop collection;&nbsp; as soon as the stop collection emits a onNext or a onError, this method calls onComplete on the source collection<br />np. mouseUp</li><li><b>mergeAll</b> - like concatAll, but doesn&#39;t align events stream by stream, but at the same time, concurrently putting on collection whatever data comes next from whatever stream</li><li><b>switchLatest</b> - like mergeAll, but stopes first stream (subscription.dispose()) as soon as another starts producing data - removes the need for stopping events, does it by itself: move mouse example: (mouseDown, mouseMove, mouseUp) -&amp;gt; mouseUp disposes of mouseMove, and then disposes of itself</li><li>debouncing = any strategy to make sure time-consuming tasks don&#39;t get called too often (eg. xhr calls when making an autocomplete)</li><li>throttling = like debouncing but throttling executes at a regular interval, debouncing only after pause. 1s debounce will execute 1s after the LAST click, whenever he happens, 1s throttle will fire after 1s from FIRST click, and after the next, but not less than 1s from the one before</li></ul><div>Autocomplete example:</div><blockquote>var searchResultSets = keyPresses. throttle(250). <br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>map(<br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>key =&amp;gt; getJSON(“/searchResults?q=” + input.value). retry(3)<br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>). <br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>switchLatest(); <br /><br />searchResultSets.forEach(<br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>resultSet =&amp;gt; updateSearchResults(resultSet), <br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>error =&amp;gt; showMessage(“the server appears to be down.”)<br /><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span><span>&nbsp; &nbsp;  &nbsp; </span>);</blockquote><p></p>",
         "link": "https://5times1.blogspot.com/2021/08/asynchronous-programming-in-javascript_31.html",
         "published": 1630421700000,
         "created": 1630421700000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "Asynchronous Programming in JavaScript (with Rx.js Observables) (frontendmasters)",
         "description": "<ul style=&quot;text-align: left;&quot;><li>&nbsp; async problems: race conditions, memory leaks (e.g. forget remove event listener), complex state, error handling</li><li>concatAll: [ [1], [2, 3], [], [4] ].concatAll() =&amp;gt; [1, 2, 3, 4] (1 flatten 1 level, remove empty)</li><li>authors of Design Pattern missed this symmetry between iterator and observer (observer = iterator that pushes data without being asked for it)</li><li>idea: give iterators and observers uniformed API</li><li>observable from event: var mouseMoves = Observable.fromEvent(element, “mousemove”);&nbsp; </li><li>observable syntax:</li></ul><p style=&quot;text-align: left;&quot;><i></i></p><blockquote><i>var subscription = mouseMoves.forEach(<br /><span>&nbsp; &nbsp;  &nbsp; </span>event =&amp;gt; console.log(event),<br /><span>&nbsp; &nbsp;  &nbsp; </span>error =&amp;gt; console.error(error),<br /><span>&nbsp; &nbsp;  &nbsp; </span>() =&amp;gt; console.log(“done”)<br />);<br />subscription.dispose();</i></blockquote><p></p><ul style=&quot;text-align: left;&quot;><li>concatAll preserves order of data stream, always waiting for previous stream to complete, before adding data from the next, BUT caching it, thus saving time, a little like Promise.all</li></ul>",
         "link": "https://5times1.blogspot.com/2021/08/asynchronous-programming-in-javascript.html",
         "published": 1630252440000,
         "created": 1630252440000,
         "category": {
            "$text": "RxJS",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "The New Hard Parts (frontendmasters)",
         "description": "<div><p>Completed lectures. <br /></p><ul style=&quot;text-align: left;&quot;><li>Argument vs. parameter of function:<br />Parameter is variable in the declaration of function.<br />Argument is the actual value of this variable that gets passed to function.<br /></li></ul><p></p><blockquote>const func = (parameter) =&amp;gt; {}<br />func(argument);</blockquote><p></p><ul style=&quot;text-align: left;&quot;><li>&nbsp; Stack:<br />- push = add<br />- pop = remove</li><li>&nbsp; Event loop + callback (task) queue &amp;lt; microtask (job) queue (microtask is for Promises and MutationObserver, have higher priority, can be added by queueMicrotask())</li><li>Callback queue: Only tasks which were <i>already in the task queue</i> when the event  loop pass began will be executed during the current iteration. The rest  will have to wait until the following iteration.</li><li>Microtask queue: Only returns control after there&#39;s nothing queued, if new things added during the iteration - will be executed after older are done, and before the control is relinquished. Also, microtasks can add new microtasks theoretically never returning control to main thread if looped.<br /></li></ul><blockquote>log(&quot;Before enqueueing the microtask&quot;); <br />queueMicrotask(() =&amp;gt; {<br />&nbsp; &nbsp;  log(&quot;The microtask has run.&quot;)<br /> }); <br />log(&quot;After enqueueing the microtask&quot;);&nbsp;  </blockquote><ul style=&quot;text-align: left;&quot;><li>&nbsp; Jake Archibald talks about microtasks, and is an educator to look for!</li><li>&nbsp; Iterators can release data in flows, keeping the info what comes next inside themselves.</li><li>Generators can &quot;pause&quot; execution of a function (actually releasing the execution context  from callstack, and putting it back on!) with yield keyword.<br /></li></ul></div><div><div><blockquote> function *createFlow(){<br /> const num = 10<br /> const newNum = yield num<br /> yield 5 + newNum<br /> yield 6<br />}<br />const returnNextElement = createFlow()<br />const element1 = returnNextElement.next() // 10<br />const element2 = returnNextElement.next(2) // 7</blockquote><ul style=&quot;text-align: left;&quot;><li>Async is a sort of a generator function that continues execution automatically when promise resolves.<br /></li></ul><ul style=&quot;text-align: left;&quot;><p>&nbsp; </p></ul><p></p></div></div>",
         "link": "https://5times1.blogspot.com/2021/08/the-new-hard-parts-frontendmasters.html",
         "published": 1630167060000,
         "created": 1630167060000,
         "category": {
            "$text": "NewHardParts",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "React Native v2 (frontendmasters)",
         "description": "<p>&nbsp; Completed lectures.</p><p>A lot of CSS that works on web doesn&#39;t work on RN. Eg. no grid, no background-image, no animations.<br /></p><p style=&quot;text-align: left;&quot;>Final ideas:</p><ul style=&quot;text-align: left;&quot;><li>check out animations for RN with https://github.com/lottie-react-native/lottie-react-native</li><li>&amp;lt;Image /&amp;gt; compoenet&#39;s OKish when used with images inside app, otherwise better caching etc. https://github.com/DylanVann/react-native-fast-image</li><li>advanced native navigation https://reactnavigation.org/<br /></li></ul>",
         "link": "https://5times1.blogspot.com/2021/08/react-native-v2-frontendmasters_24.html",
         "published": 1629822240000,
         "created": 1629822240000,
         "category": {
            "$text": "ReactNative",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      },
      {
         "title": "React Native, v2 (frontendmasters)",
         "description": "<ul style=&quot;text-align: left;&quot;><li>useState, useCallback, useEffect, fetch... are&nbsp;  executed in JS engine, therefore - used the same</li><li>useCallback can be used to simplify useEffect logic by calling a function inside a component without redefining the whole function on every render</li><li>for testing, react-native-testing-library, and end2end Detox</li><li>FlatList has onRefresh prop used when refreshed by pulling down</li><li>forms have different built in elements with some props (TextInput + multiline, Picker = select, Switch = toggle button...)</li><li>should check out documentation and React Native Community (https://github.com/react-native-community/) which feature semi-official components<br /></li></ul>",
         "link": "https://5times1.blogspot.com/2021/08/react-native-v2-frontendmasters.html",
         "published": 1629743760000,
         "created": 1629743760000,
         "category": {
            "$text": "ReactNative",
            "domain": "http://www.blogger.com/atom/ns#"
         },
         "enclosures": [],
         "media": {}
      }
   ]
}